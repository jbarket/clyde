"""
Tests for Clyde configuration builder.
"""

import pytest
import tempfile
from pathlib import Path
from unittest.mock import patch, MagicMock

from clyde.src.config import ClydeConfig
from clyde.src.builder import ConfigBuilder, ConfigValidator


class TestConfigBuilder:
    """Test the ConfigBuilder class."""
    
    def test_create_bootloader(self):
        """Test bootloader creation."""
        with tempfile.TemporaryDirectory() as tmpdir:
            project_path = Path(tmpdir)
            
            config = ClydeConfig(
                project_name="test-project",
                language="python",
                project_path=project_path
            )
            
            builder = ConfigBuilder(config)
            builder.create_bootloader()
            
            bootloader_file = project_path / "claude.md"
            assert bootloader_file.exists()
            
            content = bootloader_file.read_text()
            assert "Claude Development Environment" in content
            assert ".clyde/generated.md" in content
    
    def test_create_project_files(self):
        """Test creation of project-specific files."""
        with tempfile.TemporaryDirectory() as tmpdir:
            project_path = Path(tmpdir)
            
            config = ClydeConfig(
                project_name="test-project",
                language="python",
                project_path=project_path
            )
            
            builder = ConfigBuilder(config)
            builder.create_project_files()
            
            # Check that required files were created
            claude_dir = project_path / ".claude"
            assert (claude_dir / "project.md").exists()
            assert (claude_dir / "architecture.md").exists()
            assert (claude_dir / "custom").exists()
            assert (claude_dir / ".gitignore").exists()
            
            # Check content
            project_content = (claude_dir / "project.md").read_text()
            assert "test-project" in project_content
    
    def test_build_generated_file_empty(self):
        """Test building generated file with no modules."""
        with tempfile.TemporaryDirectory() as tmpdir:
            project_path = Path(tmpdir)
            
            config = ClydeConfig(
                project_name="test-project",
                language="python",
                project_path=project_path,
                includes=[]  # No modules
            )
            
            builder = ConfigBuilder(config)
            content = builder.build_generated_file()
            
            assert "No modules are currently configured" in content
            assert "test-project" in content
    
    @patch('clyde.src.builder.ModuleResolver')
    def test_build_generated_file_with_modules(self, mock_resolver_class):
        """Test building generated file with modules."""
        with tempfile.TemporaryDirectory() as tmpdir:
            project_path = Path(tmpdir)
            
            config = ClydeConfig(
                project_name="test-project",
                language="python",
                project_path=project_path
            )
            
            # Mock module resolver
            mock_resolver = MagicMock()
            mock_resolver.get_all_module_content.return_value = {
                "core.tdd": "# Test-Driven Development\n\nTDD content...",
                "python.general": "# Python Guidelines\n\nPython content..."
            }
            mock_resolver_class.return_value = mock_resolver
            
            builder = ConfigBuilder(config)
            content = builder.build_generated_file()
            
            assert "Development Standards - test-project" in content
            assert "Generated by clyde" in content
            assert "Test-Driven Development" in content
            assert "Python Guidelines" in content
    
    def test_format_module_content_with_boundaries(self):
        """Test module content formatting with boundaries enabled."""
        with tempfile.TemporaryDirectory() as tmpdir:
            project_path = Path(tmpdir)
            
            config = ClydeConfig(
                project_name="test-project",
                language="python",
                project_path=project_path
            )
            config.options["show_module_boundaries"] = True
            
            builder = ConfigBuilder(config)
            formatted = builder._format_module_content("core.tdd", "# TDD\n\nContent")
            
            assert "<!-- Module: core.tdd -->" in formatted
            assert "<!-- End Module: core.tdd -->" in formatted
            assert "# TDD" in formatted
    
    def test_format_module_content_without_boundaries(self):
        """Test module content formatting with boundaries disabled."""
        with tempfile.TemporaryDirectory() as tmpdir:
            project_path = Path(tmpdir)
            
            config = ClydeConfig(
                project_name="test-project",
                language="python",
                project_path=project_path
            )
            config.options["show_module_boundaries"] = False
            
            builder = ConfigBuilder(config)
            formatted = builder._format_module_content("core.tdd", "# TDD\n\nContent")
            
            assert "<!-- Module:" not in formatted
            assert "# TDD" in formatted


class TestConfigValidator:
    """Test the ConfigValidator class."""
    
    def test_validate_success(self):
        """Test successful validation."""
        with tempfile.TemporaryDirectory() as tmpdir:
            project_path = Path(tmpdir)
            
            config = ClydeConfig(
                project_name="test-project",
                language="python",
                project_path=project_path
            )
            
            # Mock module validation
            with patch.object(config, 'validate_modules', return_value=[]):
                validator = ConfigValidator(config)
                issues = validator.validate()
                
                assert issues == []
    
    def test_validate_missing_project_name(self):
        """Test validation with missing project name."""
        with tempfile.TemporaryDirectory() as tmpdir:
            project_path = Path(tmpdir)
            
            config = ClydeConfig(
                project_name="",  # Empty name
                language="python",
                project_path=project_path
            )
            
            validator = ConfigValidator(config)
            issues = validator.validate()
            
            assert any("Project name is required" in issue for issue in issues)
    
    def test_validate_missing_modules(self):
        """Test validation with missing modules."""
        with tempfile.TemporaryDirectory() as tmpdir:
            project_path = Path(tmpdir)
            
            config = ClydeConfig(
                project_name="test-project",
                language="python",
                project_path=project_path
            )
            
            # Mock missing modules
            with patch.object(config, 'validate_modules', return_value=['missing.module']):
                validator = ConfigValidator(config)
                issues = validator.validate()
                
                assert any("Module not found: missing.module" in issue for issue in issues)
    
    def test_validate_invalid_validation_level(self):
        """Test validation with invalid validation level."""
        with tempfile.TemporaryDirectory() as tmpdir:
            project_path = Path(tmpdir)
            
            config = ClydeConfig(
                project_name="test-project",
                language="python",
                project_path=project_path
            )
            config.options["validation_level"] = "invalid"
            
            validator = ConfigValidator(config)
            issues = validator.validate()
            
            assert any("Invalid validation level" in issue for issue in issues)


if __name__ == "__main__":
    pytest.main([__file__])